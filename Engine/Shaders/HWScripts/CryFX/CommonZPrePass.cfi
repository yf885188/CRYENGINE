// Copyright 2001-2018 Crytek GmbH / Crytek Group. All rights reserved.


// Lean zprepass for most expensive cases, skips tessellated geom

struct vert2fragZPrepass
{
	OUT_HPOS_IN_WPOS
#if %_RT_ALPHATEST
	float4 baseTC     : TEXCOORDN;
#endif
};

struct pixout_zprepass
{
#if (%_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1) && %_RT_ALPHATEST
	uint uCoverageMask	: SV_Coverage;
#endif
};

vert2fragZPrepass Common_ZPrepassVS(app2vertZGeneral IN_common)
{
	vert2fragZPrepass OUT = (vert2fragZPrepass)0;

	app2vertZGeneral IN = IN_common;
#if %TEMP_TERRAIN
	IN.vertCommon.Position.z = IN_common.vertCommon.baseTC.x;
#endif

	streamPos vertPassPos = (streamPos)0;
	streamPos_FromZ(IN, vertPassPos);
	
#if %TEMP_TERRAIN
	OUT.HPosition = Pos_VS_Terrain(0.0005f, g_VS_ViewProjZeroMatr, vertPassPos);
#else  
	OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);
#endif

#if %_RT_ALPHATEST	
	float3 worldTangentS = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]);
	float3 worldTangentT = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]);
	float3 worldTangentN = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]);
	
	float4 baseTC = vertPassPos.baseTC;  

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output uv coordinates

#if %_RT_DECAL_TEXGEN_2D 
	float3 DistAtten;
	_TCModifyDecal( vertPassPos, baseTC, DistAtten );
#endif 
	
	_TCModify(baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);

	#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		OUT.baseTC.xy *= CM_SilPomDetailParams.xy;
	#endif
	
	float fAlphaTest = 0.0f;
	#if %_RT_ALPHATEST	
		fAlphaTest = Get_MaterialAlphaTest();
		#if %LEAVES
			fAlphaTest = ParallelOpacityFalloff(vertPassPos.WorldPos.xyz, worldTangentN.xyz, CapOpacityFalloff, fAlphaTest);
		#endif
	#endif
	
	OUT.baseTC.w = fAlphaTest;
#endif

	return OUT;
}

pixout_zprepass Common_ZPrepassPS(vert2fragZPrepass IN)
{
	pixout_zprepass OUT = (pixout_zprepass) 0;

#if %_RT_ALPHATEST
	half diffuseMapAlpha = GetAlphaTex(diffuseTex, IN.baseTC.xy);
	#if (%_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1) && %_RT_ALPHATEST
		 GetAlphaCoverageMask( diffuseTex, IN.baseTC.xy, IN.baseTC.w, diffuseMapAlpha, OUT.uCoverageMask);
	#endif

	clip(diffuseMapAlpha - IN.baseTC.w);
#endif
	
#if %_RT_DISSOLVE
	float fDissolve = Get_SPI_Dissolve();
	const int2 vPixQuadIdx = (int2)IN.WPos.xy % 2; // 4 transparency levels for a 2x2 quad. We're using dot/abs instead, since rsx doens't support array indexing.

	clip((fDissolve > 0 ? 1 : -1) * (abs(dot(half4(0.0h, 0.76h, 0.5h,-1.0h), vPixQuadIdx.xxyy)) - abs(fDissolve))); // todo: try using coverage mask when in MSAA mode.
#endif

	return OUT;
}

technique ZPrepass
{
	pass p0
	{
		VertexShader = Common_ZPrepassVS() ZVS;
		PixelShader = Common_ZPrepassPS() ZPS;
		GeometryShader = $AutoGS_MultiRes();

		ZEnable = true;
		ZWriteEnable = true; 
		CullMode = Back;

#if %GRASS || %LEAVES
		CullMode = None;
#endif
	}
}
